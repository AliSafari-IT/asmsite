"use strict";(self.webpackChunkasmsite=self.webpackChunkasmsite||[]).push([[1566],{9094:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var o=a(4848),n=a(8453);const s={sidebar_position:3,slug:"sch-dev"},i="Schema-Driven Development",r={id:"devtools/dataformats/json/json-overview/Schema-Driven-Development",title:"Schema-Driven Development",description:"The basic use of JSON-Schema is to generate clear, human/machine readable documentation. Moreover, JSON-Schema can be a great tool for data modeling, even more efficient as a data modeling tool to that of a validation tool. Meaning that its inability to validate a value based on another value, keeps its validation feature at a basic level for development. For example, to say that the value of ageOne is less than the value of ageTwo, JSON-Schema is unable to validate that and the most it can do for us is that these are both numbers.",source:"@site/docs/015-devtools/02-dataformats/001-json/json-overview/03-Schema-Driven-Development.md",sourceDirName:"015-devtools/02-dataformats/001-json/json-overview",slug:"/devtools/dataformats/json/json-overview/sch-dev",permalink:"/docs/devtools/dataformats/json/json-overview/sch-dev",draft:!1,unlisted:!1,editUrl:"https://github.com/AliSafari-IT/asmsite/docs/015-devtools/02-dataformats/001-json/json-overview/03-Schema-Driven-Development.md",tags:[],version:"current",lastUpdatedBy:"asafarim",lastUpdatedAt:1714173849e3,sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"sch-dev"},sidebar:"tutorialSidebar",previous:{title:"Json: Schema",permalink:"/docs/json-schema"},next:{title:"How to use JSON",permalink:"/docs/how-to-use/json-in-ts"}},l={},d=[];function c(e){const t={code:"code",h1:"h1",p:"p",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"schema-driven-development",children:"Schema-Driven Development"}),"\n",(0,o.jsxs)(t.p,{children:["The basic use of ",(0,o.jsx)(t.code,{children:"JSON-Schema"})," is to generate clear, human/machine readable documentation. Moreover, JSON-Schema can be a great tool for data modeling, even more efficient as a data modeling tool to that of a validation tool. Meaning that its inability to validate a value based on another value, keeps its validation feature at a basic level for development. For example, to say that the value of ",(0,o.jsx)(t.code,{children:"ageOne"})," is less than the value of ",(0,o.jsx)(t.code,{children:"ageTwo"}),", JSON-Schema is unable to validate that and the most it can do for us is that these are both numbers."]})]})}function m(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>r});var o=a(6540);const n={},s=o.createContext(n);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);