"use strict";(self.webpackChunkasmsite=self.webpackChunkasmsite||[]).push([[9774],{1911:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var s=t(4848),n=t(8453);const o={sidebar_position:1,title:"Using MessagePack in .Net "},c=void 0,i={id:"devtools/dataformats/msgpack-lite/csharp-example",title:"Using MessagePack in .Net ",description:"HHere's an example of how to use MessagePack in .NET Core 3.1 or later with C# using the MessagePack NuGet package:",source:"@site/docs/015-devtools/02-dataformats/006-msgpack-lite/03-csharp-example.md",sourceDirName:"015-devtools/02-dataformats/006-msgpack-lite",slug:"/devtools/dataformats/msgpack-lite/csharp-example",permalink:"/docs/devtools/dataformats/msgpack-lite/csharp-example",draft:!1,unlisted:!1,editUrl:"https://github.com/AliSafari-IT/asmsite/docs/015-devtools/02-dataformats/006-msgpack-lite/03-csharp-example.md",tags:[],version:"current",lastUpdatedBy:"asafarim",lastUpdatedAt:1714173849e3,sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Using MessagePack in .Net "},sidebar:"tutorialSidebar",previous:{title:"Using MessagePack in TypeScript",permalink:"/docs/devtools/dataformats/msgpack-lite/ts-example"},next:{title:"Introduction",permalink:"/docs/devtools/versioncontrol/intro"}},r={},d=[];function l(e){const a={a:"a",code:"code",em:"em",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.p,{children:["HHere's an example of how to use MessagePack in .NET Core 3.1 or later with C# using the ",(0,s.jsx)(a.em,{children:"MessagePack"})," NuGet package:"]}),"\n",(0,s.jsx)(a.p,{children:"First, you need to install the package:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-c#",children:"Install-Package MessagePack\n"})}),"\n",(0,s.jsx)(a.p,{children:"Then, you can use the MessagePack library to serialize and deserialize your objects:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-csharp",children:"import * as msgpack from 'msgpack-lite';\r\n\r\n// Define your object\r\nconst obj = { name: 'Alice', age: 30, email: ['alice@example.com'] };\r\n\r\n// Encode the object as a MessagePack buffer\r\nconst buffer = msgpack.encode(obj);\r\n\r\n// Decode the buffer back into an object\r\nconst decodedObj = msgpack.decode(buffer);\r\n\r\nconsole.log(decodedObj); // { name: 'Alice', age: 30, email: ['alice@example.com'] }\n"})}),"\n",(0,s.jsx)(a.p,{children:"This code defines an object obj, encodes it as a MessagePack buffer using msgpack.encode, and decodes the buffer back into an object using msgpack.decode. The resulting decodedObj should be the same as the original obj."}),"\n",(0,s.jsxs)(a.p,{children:["Note that msgpack-lite supports a wide range of data types, including arrays, maps, numbers, and strings. You can find more information about how to use the library in the official documentation: ",(0,s.jsx)(a.a,{href:"https://github.com/kawanet/msgpack-lite",children:"https://github.com/kawanet/msgpack-lite"})]})]})}function p(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>c,x:()=>i});var s=t(6540);const n={},o=s.createContext(n);function c(e){const a=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),s.createElement(o.Provider,{value:a},e.children)}}}]);