"use strict";(self.webpackChunkasmsite=self.webpackChunkasmsite||[]).push([[6568],{4726:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=o(4848),n=o(8453);const r={sidebar_position:1,title:"Example in TypeScript"},a=void 0,i={id:"devtools/dataformats/protobufjs/example",title:"Example in TypeScript",description:"Here's an example of how to define and use a Protocol Buffers message type in TypeScript using the protobufjs library:",source:"@site/docs/015-devtools/02-dataformats/005-protobufjs/02-example.md",sourceDirName:"015-devtools/02-dataformats/005-protobufjs",slug:"/devtools/dataformats/protobufjs/example",permalink:"/docs/devtools/dataformats/protobufjs/example",draft:!1,unlisted:!1,editUrl:"https://github.com/AliSafari-IT/asmsite/docs/015-devtools/02-dataformats/005-protobufjs/02-example.md",tags:[],version:"current",lastUpdatedBy:"asafarim",lastUpdatedAt:1714173849e3,sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Example in TypeScript"},sidebar:"tutorialSidebar",previous:{title:"Protocol Buffers",permalink:"/docs/devtools/dataformats/protobufjs/protobufjs"},next:{title:"MessagePack data format",permalink:"/docs/devtools/dataformats/msgpack-lite/msgpack"}},c={},d=[];function l(e){const t={code:"code",em:"em",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Here's an example of how to define and use a Protocol Buffers message type in TypeScript using the ",(0,s.jsx)(t.em,{children:"protobufjs"})," library:"]}),"\n",(0,s.jsx)(t.p,{children:"First, you need to install the library:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"npm install protobufjs\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Then, you can define your message type in a ",(0,s.jsx)(t.em,{children:".proto"})," file, like this:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'syntax = "proto3";\r\n\r\nmessage Person {\r\n  string name = 1;\r\n  int32 age = 2;\r\n  repeated string email = 3;\r\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"This defines a simple message type called Person with three fields: name (a string), age (an integer), and email (a repeated string)."}),"\n",(0,s.jsx)(t.p,{children:"Next, you can use the protobufjs library to load your message type and create instances of it in your TypeScript code:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"import { load } from 'protobufjs';\r\n\r\n// Load the message type from the .proto file\r\nconst root = await load('path/to/person.proto');\r\n\r\n// Get a reference to the Person message type\r\nconst Person = root.lookupType('Person');\r\n\r\n// Create an instance of the Person message\r\nconst person = Person.create({\r\n  name: 'Alice',\r\n  age: 30,\r\n  email: ['alice@example.com'],\r\n});\r\n\r\n// Encode the message as a binary buffer\r\nconst buffer = Person.encode(person).finish();\r\n\r\n// Decode the binary buffer back into a Person message\r\nconst decodedPerson = Person.decode(buffer);\r\n\r\nconsole.log(decodedPerson); // { name: 'Alice', age: 30, email: ['alice@example.com'] }\n"})}),"\n",(0,s.jsx)(t.p,{children:"This code loads the Person message type from the .proto file using the load function, gets a reference to the type using lookupType, creates an instance of the message using create, encodes the message as a binary buffer using encode, decodes the binary buffer back into a Person message using decode, and finally logs the decoded message to the console."})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>i});var s=o(6540);const n={},r=s.createContext(n);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);